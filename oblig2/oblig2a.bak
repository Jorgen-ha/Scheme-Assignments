; Gruppemedlemmer; jorgehf, eirikmar og arminka

load "huffman.scm"

; 1a)
(define (p-cons x y)
  (lambda (proc) (proc x y)))

(define (p-car x)
  (list-ref (x list) 0))

(define (p-cdr x)
  (list-ref (x list) 1))

;1b)

;1
((lambda (foo x)
   (if(= x foo)
      'same
      'different))
 5 foo)

;2
((lambda (bar baz)
   ((lambda (bar foo)
      (list foo bar))
    (list bar baz) baz))
 foo 'towel)

;1c)
(define (infix-eval exp)
  ((list-ref exp 1) (list-ref exp 0) (list-ref exp 2)))

;1d) - Prosedyre vs tegnet '/'



;2a) -  Halerekursiv versjon av decode
;Halerekursiv versjon - legger til hvert element i msg som reverseres før retur
(define (decode bits tree)
  (define (decode-1 bits current-branch msg)
    (if (null? bits)
        (reverse msg)
        (let ((next-branch
               (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (decode-1 (cdr bits) tree (cons (symbol-leaf next-branch) msg))
              (decode-1 (cdr bits) next-branch msg)))))
  (decode-1 bits tree '()))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;2b) - Resultatet av å kalle prosedyren 'decode' fra oppgaven over med 
;      kodetreet og bitkoden gitt som eksempler blir;
(decode sample-code sample-tree)

;2c)  Encode - gitt symboler og tree, returner liste av 0 og 1
(define (encode syms tree)
  (define (encode-1 syms branch msg)
    (if (null? syms)
        (reverse msg)
        (if (leaf? branch)
            (encode-1 (cdr syms) tree msg)
            (if (sym-in-branch? (car syms) (left-branch branch))
                (encode-1 syms (left-branch branch) (cons 0 msg))
                (encode-1 syms (right-branch branch) (cons 1 msg))))))
  (encode-1 syms tree '()))

(define (sym-in-branch? sym branch)
  (define n (length branch))
  (if (leaf? branch)
      (if (eq? sym (symbol-leaf  branch))
          #t
          #f)
      (if (= n 2)
          (sym-in-list? sym (car branch))
          (sym-in-branch? sym (cdr branch)))))

(define (sym-in-list? sym branch)
  (if (null? branch) 
      #f
      (if (eq? sym (car branch))
          #t
          (sym-in-list? sym (cdr branch)))))

;2d) 
(make-leaf-set '((a 2) (b 5) (c 1) (d 3) (e 1) (f 3)))

(define (grow-huffman-tree set)
  (let ((ordSet (make-leaf-set set)))
    (if (= (length set) 1)
        set
        )))


(define (pair list)

  (make-code-tree (car list) (cadr list)))